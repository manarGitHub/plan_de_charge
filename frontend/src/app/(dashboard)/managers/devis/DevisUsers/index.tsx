import { Devis } from '@/state/api'; // Update this import based on your actual types
import { UserWithDevis } from '@/state/api'; // Adjust the import to match the new interface
import { Plus, Trash, Users } from 'lucide-react'; // Added Users icon
import React from 'react';

interface Props {
    devis: Devis;
    setDevis: (devis: Devis) => void;
}

const DevisUsers: React.FC<Props> = ({ devis, setDevis }) => {

    const handleAddUser = () => {
        const newUserWithDevis: UserWithDevis = {
            id: undefined,  // ID will be generated by the database
            userId: 0, // Set default values as necessary
            devisId: devis.id,
            user: {
                username: "new-user-" + Date.now(), // Provide a default username
                profile: "",
                cognitoId: "id-" + Date.now(), // Provide a default cognitoId
            }
        };

        // Ensure devis.users is an array before appending the new user
        setDevis({
            ...devis,
            users: [...(devis.users || []), newUserWithDevis]
        });
    }

    const handleUsernameChange = (index: number, value: string) => {
        const updatedUsers = [...devis.users]; // Create a shallow copy of the users array
        updatedUsers[index] = { 
            ...updatedUsers[index], 
            user: { 
                ...updatedUsers[index].user, 
                username: value 
            } 
        };
        setDevis({ ...devis, users: updatedUsers });
    }

    const handleProfileChange = (index: number, value: string) => {
        const updatedUsers = [...devis.users]; // Create a shallow copy of the users array
        updatedUsers[index] = { 
            ...updatedUsers[index], 
            user: { 
                ...updatedUsers[index].user, 
                profile: value 
            } 
        };
        setDevis({ ...devis, users: updatedUsers });
    }

    const handleCognitoIdChange = (index: number, value: string) => {
        const updatedUsers = [...devis.users]; // Create a shallow copy of the users array
        updatedUsers[index] = { 
            ...updatedUsers[index], 
            user: { 
                ...updatedUsers[index].user, 
                cognitoId: value 
            } 
        };
        setDevis({ ...devis, users: updatedUsers });
    }

    const handleRemoveUser = (index: number) => {
        const updatedUsers = devis.users.filter((_, i) => i !== index);
        setDevis({ ...devis, users: updatedUsers });
    }

    return (
        <div data-theme="fantasy" className="h-fit bg-base-200 p-5 rounded-xl w-full">
            <div className="flex justify-between items-center mb-4">
            <h2 className="flex items-center space-x-2 text-xl font-semibold text-black">
  <Users className="h-5 w-5 mr-2 text-blue-600" /> {/* Changed the icon color to black */}
  <span>Liste des Ressources</span>
</h2>
                <button
              className="flex h-9 w-9 items-center justify-center rounded bg-gray-200 dark:bg-dark-tertiary dark:text-white"
              onClick={handleAddUser}
                >
                    <Plus className="w-4 text-accent text-blue-600" /> {/* Changed the color to match the theme */}
                </button>
            </div>

            <div className="scrollable">
                <table className="table w-full">
                    <thead className="uppercase">
                        <tr>
                            <th>ID</th>
                            <th>Nom de Ressource</th>
                            <th>Profile</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        {(devis.users || []).map((userWithDevis, index) => (
                            <tr key={userWithDevis.id}>
                                <td>
                                    <input
                                        type="text"
                                        value={userWithDevis.user.cognitoId || ''}
                                        className={`input input-sm input-bordered w-full ${
                                            !userWithDevis.user.cognitoId ? 'input-error' : ''
                                        }`}
                                        onChange={(e) => handleCognitoIdChange(index, e.target.value)}
                                        required
                                    />
                                </td>
                                <td>
                                    <input
                                        type="text"
                                        value={userWithDevis.user.username}
                                        className={`input input-sm input-bordered w-full ${
                                            !userWithDevis.user.username ? 'input-error' : ''
                                        }`}
                                        onChange={(e) => handleUsernameChange(index, e.target.value)}
                                    />
                                </td>
                                <td>
                                    <input
                                        type="text"
                                        value={userWithDevis.user.profile}
                                        className={`input input-sm input-bordered w-full ${
                                            !userWithDevis.user.profile ? 'input-error' : ''
                                        }`}
                                        onChange={(e) => handleProfileChange(index, e.target.value)}
                                    />
                                </td>
                                <td>
                                    <button
                                        onClick={() => handleRemoveUser(index)}
                                        className="flex h-9 w-9 items-center justify-center  bg-gray-200 dark:bg-dark-tertiary dark:text-white btn-circle"
                                    >
                                        <Trash className="w-4 text-accent text-blue-600" /> {/* Changed the color to match the theme */}
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default DevisUsers;
